Ex 1

package main
import "fmt"

func main() {
  numeros := []int{1, 2, 3, 4, 5}
    media := calcularMedia(numeros)
    fmt.Printf("A média dos valores é: %.2f\n", media)
}

func calcularMedia(slice []int) float64 {
    total := 0
    for _, valor := range slice {
        total += valor
    }
    media := float64(total) / float64(len(slice))
    return media
}

Ex 2

package main

import (
    "fmt"
    "unicode"
)

func countVowels(str string) int {
    vowels := []rune{'a', 'e', 'i', 'o', 'u'}
    count := 0

    for _, char := range str {
        for _, vowel := range vowels {
            if char == vowel || char == unicode.ToUpper(vowel) {
                count++
            }
        }
    }

    return count
}

func main() {
    str := "Lorem ipsum dolor sit amet"
    vowelCount := countVowels(str)
    fmt.Printf("A string \"%s\" possui %d vogais\n", str, vowelCount)
}

ex 3

package main

import "fmt"

func concatenateStrings(slice []string) string {
    var result string
    for _, str := range slice {
        result += str
    }
    return result
}

func main() {
    slice := []string{"Olá", "mundo", "!"}
    result := concatenateStrings(slice)
    fmt.Println(result)
}


ex 4

func secondLargest(slice []int) int {
    if len(slice) < 2 {
        return 0
    }

    max, secondMax := slice[0], slice[0]

    for _, num := range slice {
        if num > max {
            secondMax = max
            max = num
        } else if num > secondMax && num != max {
            secondMax = num
        }
    }

    return secondMax
}


ex 5

func findPosition(slice []int, value int) int {
    for i, num := range slice {
        if num == value {
            return i
        }
    }

    return -1
}

Ex 6

func concatStrings(slice []string) (string, error) {
    if len(slice) == 0 {
        return "", fmt.Errorf("O slice está vazio")
    }

    var result strings.Builder
    for i, str := range slice {
        if i != 0 {
            result.WriteString(",")
        }
        result.WriteString(str)
    }

    return result.String(), nil
}


Ex 7

func applyFunc(slice []int, f func(int) int) ([]int, error) {
    if len(slice) == 0 {
        return nil, fmt.Errorf("O slice está vazio")
    }

    result := make([]int, len(slice))
    for i, num := range slice {
        result[i] = f(num)
    }

    return result, nil
}


Ex 8

func filterEven(slice []int) ([]int, error) {
    if len(slice) == 0 {
        return nil, fmt.Errorf("O slice está vazio")
    }

    var result []int
    for _, num := range slice {
        if num%2 == 0 {
            result = append(result, num)
        }
    }

    return result, nil
}

Ex 9 


func splitWords(str string) ([]string, error) {
    if len(str) == 0 {
        return nil, fmt.Errorf("A string está vazia")
    }

    words := strings.Split(str, " ")
    return words, nil
}


Ex 10

func ordenarSlice(slice []int) ([]int, error) {
    if len(slice) == 0 {
        return nil, errors.New("Slice vazio")
    }
    sort.Ints(slice)
    return slice, nil
}


Ex 11

func verificarPrimo(n int) (bool, error) {
    if n < 0 {
        return false, errors.New("Número negativo")
    }
    if n < 2 {
        return false, nil
    }
    for i := 2; i <= int(math.Sqrt(float64(n))); i++ {
        if n%i == 0 {
            return false, nil
        }
    }
    return true, nil
}


Ex 12

func stringsComMaiuscula(slice []string) (string, error) {
    var result string
    for _, s := range slice {
        if len(s) > 0 && unicode.IsUpper(rune(s[0])) {
            result += s + " "
        }
    }
    if len(result) == 0 {
        return "", errors.New("Slice vazio ou sem strings com letra maiúscula")
    }
    return strings.TrimSpace(result), nil
}


Ex 13

func somarDigitos(n int) (int, error) {
    if n < 0 {
        return 0, errors.New("Número negativo")
    }
    var soma int
    for n > 0 {
        soma += n % 10
        n /= 10
    }
    return soma, nil
}


Ex 14 

func intersecaoSlices(slice1, slice2 []int) ([]int, error) {
    if len(slice1) == 0 || len(slice2) == 0 {
        return nil, errors.New("Pelo menos um dos slices é vazio")
    }
    m := make(map[int]bool)
    for _, n := range slice1 {
        m[n] = true
    }
    var result []int
    for _, n := range slice2 {
        if m[n] {
            result = append(result, n)
        }
    }
    if len(result) == 0 {
        return nil, errors.New("Não há números em comum nos dois slices")
    }
    return result, nil
}


Ex 15

func numeroNoSlice(n int, slice []int) (bool, error) {
    if len(slice) == 0 {
        return false, errors.New("Slice vazio")
    }
    for _, x := range slice {
        if x == n {
            return true, nil
        }
    }
    return false, nil
}


Ex 16

